package yogit

import (
	// "compress/gzip"
	"bufio"
	"bytes"
	"crypto/sha1"
	"encoding/hex"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
	"time"

	"github.com/aquasecurity/table"
	"github.com/liamg/tml"
)

type Commit struct {
	Parent Sha1Hash `json:"parent"`
	Id Sha1Hash `json:"hashId"`
	Tree Sha1Hash `json:"tree"`
	Author string `json:"author"`
	Contact string `json:"contact"`
	CommitMsg string `json:"
commitMsg"`
	CommittedAt time.Time `json:"committedAt"`
}

type HashId struct {
	Id string
}

type Sha1Hash struct {
	Hash string
}

func YoGit() {
	fmt.Println("WELCOME TO YOGIT")
}

const (
	LOG_PATH = ".yogit/log/logs"
	LOG_REFS_PATH = ".yogit/log"
	REFS_HEADS = ".yogit/refs/heads"
)

func Init() {
	fmt.Println("Initialising yogit in current dir")
	// use an input package to set the global vari
ables
	err := os.MkdirAll(".yogit", 0777)
	LogErr(err, "Error in making yogit folders")

	subFolders := []string{"objects", "log", "refs"}
	subFiles := []string{"stage", "HEADER", "GLOBALS"}
	logSubFiles := []string{"logs"}
	// logSubFolders := []string{"refs"}
	refSubFolders := []string{"heads", "tags"}

	for _, folder := range subFolders {
		path := fmt.Sprintf(".yogit/%s", folder)
		err := os.M
kdirAll(path, 0777)
		LogErr(err, "Error in making subfolders")
	}

	for _, file := range subFiles {
		path := fmt.Sprintf(".yogit/%s",file)
		_, err := os.OpenFile(path, os.O_CREATE | os.O_RDWR |os.O_TRUNC,  0777)
		LogErr(err, "Error making sub file")
	}

	for _, logFile := range logSubFiles {
		path := fmt.Sprintf(".yogit/log/%s", logFile)
		_, err := os.Create(path)
		LogErr(err, "Error making
 logFile")
	}

	for _, ref := range refSubFolders {
		path := fmt.Sprintf(".yogit/refs/%s", ref)
		err := os.Mkdir(path, 0777)
		LogErr(err, "Error in making refSubFolders")
	}

	// create refs folder inside log
	errL := os.Mkdir(".yogit/log/refs", 0777)
	LogErr(errL, "Error making refs as sub_folder in .yogit/log/refs, Init()")

	for _, logSubFolder := range refSubFolders {
		path := fmt.Sprintf(
".yogit/log/refs/%s", logSubFolder)
		err := os.Mkdir(path, 0777)
		LogErr(err, "Error in making logSubFolder")

	}


	// make master branch by defualt and write it to the HEADER in .yogit
	master, err := os.Create(".yogit/refs/heads/master")
	LogErr(err, "Error in making master branch in heads")
	master.Close()

	header, err := os.OpenFile(".yogit/HEADER", os.O_WRONLY | os.O_TRUNC, 0777)
	LogErr(
err, "Error in finding HEADER")
	defer header.Close()

	_, er := fmt.Fprintf(header, "ref:refs/heads/master")
	LogErr(er, "Error in making default write to header")

	fmt.Println(tml.Sprintf("<green>Done initialising</green>\n"))
}

func updateBranch(hash Sha1Hash) {
	// Find what the current HEAD is pointing at
	header, err := os.ReadFile(".yogit/HEADER")
	LogErr(err, "Error in reading HEADER")
	
pointingTo := string(header)
	// expect return to be refs/heads/master or any other branch
	_, activeBranch, _:= strings.Cut(pointingTo, ":")

	pathTo := fmt.Sprintf(".yogit/%s", activeBranch)
	branch, err := os.OpenFile(pathTo, os.O_CREATE | os.O_TRUNC | os.O_WRONLY, 0777)
	LogErr(err, "Error in finding the active branch")
	defer branch.Close()

	_, er := branch.Write([]byte(hash.Hash))
	LogErr(e
r, "Error in updating branch")

}

func updateLog(c Commit) {
	logFile, err := os.OpenFile(LOG_PATH, os.O_CREATE | os.O_RDWR | os.O_APPEND, 0777)
	LogErr(err, "Error opening log file: updateLog()")
	defer logFile.Close()

	fmtC:= fmt.Sprintf( "author:%s  id:%s  message:%s tree:%s at:%s\n", c.Author, c.Id.Hash, c.CommitMsg, c.Tree.Hash, c.CommittedAt.Format("Jan 2, 1990 3:04 PM"))
	logger := log.Ne
w(logFile, "", 0)
	logger.Println(fmtC)

	// so when we are updating a log, we want to log it to the current branch the person is also on 
	HEAD, err := os.ReadFile(HEADER_PATH)
	LogErr(err, "Error opening HEAD, See: updateLog()")
	_, currBranch, _ := strings.Cut(string(HEAD), ":")

	logBranchPath := fmt.Sprintf("%s/%s", LOG_REFS_PATH, currBranch)
	logBranch, err := os.OpenFile(logBranchPath, os.O
_CREATE | os.O_APPEND | os.O_RDWR, 0777)
	LogErr(err, "Error in opening branch path, see updateLog()")
	defer logBranch.Close()

	logBranch.Write([]byte(fmtC))
	fmt.Println(tml.Sprintf("<green> -> New commit stored\n -> Branch Updated</green>\n"))

}

func StagingArea() {
	// we need to write all current files into the staging area in .yogit/stage
	dirEntries, err := os.ReadDir(".")
	LogErr(err, "
Error in reading StagingArea(), reading directory")

	stage, err := os.OpenFile(".yogit/stage", os.O_CREATE | os.O_TRUNC | os.O_RDWR, 0777)
	LogErr(err, "Error in opening stage file")
	defer stage.Close()

	for _, path := range dirEntries {
		if path.Name() == ".git" || path.Name() == ".yogit" || path.IsDir() {
			continue
		} 

		info, err := path.Info()
		LogErr(err, "Error in getting file info"
)

		hashId := SaveToObject(info.Name())
		_, errw := fmt.Fprintf(stage, "%04o %-20s %20s\n", info.Mode().Perm(), hashId, info.Name() )
		LogErr(errw, "Error in writing to file")
	}
	// fmt.Println("check ./yogit/stage")
	fmt.Println(tml.Sprintf("\n  <yellow>---processing index file---</yellow>\n"))
	fmt.Println(tml.Sprintf("  <green>all files ready for saving</green>\n"))
}

// this function is c
alled  in StaginArea(), it serves as hashing and saving to the object store at blob level
// so for every file, we get their hash and compressed content, and write their hash and name to the STAGE file 
// the file writing is done in StagingArea()
// the tree object is created by TreeObject() which basically does the same thing as Add() but its the index file itself
func SaveToObject(file string) 
Sha1Hash{
	// fmt.Println("adding all files onto the staging area")

	content, err := os.ReadFile(file)
	LogErr(err, "Error occured, could not find file specified")
	// hash the content, get the first 2 names
	hasher := sha1.New() 
	hasher.Write([]byte(content))
	hashedContent := hasher.Sum(nil)
	hashId := hex.EncodeToString(hashedContent)
	objectFolder := hashId[:2]

	byteReader := bytes.NewReade
r(content)

	// check if saveAt already exists, if it exisit just save the file ther
	saveAt := fmt.Sprintf(".yogit/objects/%s", objectFolder)
	errM := os.Mkdir(saveAt, 0777)
	if os.IsExist(errM) {
		fmt.Printf("folder already exists, sharding into -> %s | %s\n", errM, hashId)

		blobPath := fmt.Sprintf("%s/%s", saveAt, hashId[2:])
		blob, err := os.Create(blobPath)
		LogErr(err, "Error in creatin
g blob file in os.IsExist(err)")
		io.Copy(blob, byteReader)

		return Sha1Hash{Hash: hashId}
	}

	
  LogErr(errM, "check Add()")
	
	blobPath := fmt.Sprintf("%s/%s", saveAt, objectFolder[2:])
	blobName := fmt.Sprintf("%s%s", blobPath, hashId[2:])
	blob, err := os.Create(blobName)
	LogErr(err, "Error in making blob")

	// gzipWriter := gzip.NewWriter(blob)
	// gzipWriter.Write(content)
	// gzipWrit
er.Close()
	io.Copy(blob, byteReader)
	
	// fmt.Printf("%s saved at %s\n", file,  hashId)

	return Sha1Hash{Hash:hashId}
}

func SaveCommit(msg string) {
	const INDEX_PATH = ".yogit/stage"

	content, err := os.ReadFile(INDEX_PATH)
	LogErr(err, "Error occured, could not find file specified")

	treeHash := HasherFn(content)
	hashId := treeHash.Hash
	objectFolder := treeHash.Hash[:2]

	saveAt := fmt.
Sprintf(".yogit/objects/%s", objectFolder)
	errM := os.Mkdir(saveAt, 0777)

	if os.IsExist(errM) {
		// we want to save the commitObj inside that same folder, 
		// commitPath := fmt.Sprintf("%s/%s")
		fmt.Println("hash ->", hashId)
		fmt.Println("sharding commit", saveAt)
		fmt.Println("treeName ->", hashId[2:])
		treePath := fmt.Sprintf("%s/%s", saveAt , hashId[2:])
		tree, err := os.Create(tree
Path)
		LogErr(err, "Error occured in SaveCommit(), sharding")
		defer tree.Close()

		byteReader := bytes.NewReader(content)
		io.Copy(tree, byteReader)
	}else {

		LogErr(errM, "check Add()")
	}
	
	treePath := fmt.Sprintf("%s/%s", saveAt, objectFolder[2:])
	treeName := fmt.Sprintf("%s%s", treePath, hashId[2:])
	fmt.Println(treeName)
	tree, err := os.Create(treeName)
	LogErr(err, "Error in making
 tree")
	defer tree.Close()

	byteReader := bytes.NewReader(content)
	io.Copy(tree, byteReader)
	
	// fmt.Println("hashed_content for tree is store at --- \n",hashId)

	// create a hash for commit data
	commit := Commit{}
	commit.Author = "archive@persona-mp3jpeg"
	// commit.Id = 
	commit.Contact = "<archive@persona-mp3>"
	commit.Tree = treeHash
	commit.CommitMsg = msg
	commit.CommittedAt = time.N